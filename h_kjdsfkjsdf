import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class YourEntity {

    @Id
    private Long id;
    private String column1;
    private String column2;
    private String column3;

    // Getters and setters
}


-----------
import org.springframework.data.jpa.repository.JpaRepository;

public interface YourRepository extends JpaRepository<YourEntity, Long> {
   @Query("SELECT e FROM YourEntity e JOIN OtherEntity o ON e.someId = o.someId WHERE o.someProperty = :somePropertyValue")
    List<YourEntity> findDataWithCustomJoinQuery(String somePropertyValue);
}
---------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Service
public class DataLoadingService implements CommandLineRunner {

    @Autowired
    private YourRepository yourRepository;

    @Value("${data.loading.enabled}")
    private boolean dataLoadingEnabled;

    private Map<String, YourEntity> dataMap;

    @Override
    public void run(String... args) throws Exception {
        if (dataLoadingEnabled) {
            loadData();
        }
    }

    @PostConstruct
    public void loadData() {
        String somePropertyValue = "someValue"; // Provide the actual value or parameter
        List<YourEntity> records = yourRepository.findDataWithCustomJoinQuery(somePropertyValue);
        dataMap = new ConcurrentHashMap<>();
        for (YourEntity record : records) {
            dataMap.put(record.getColumn1(), record);
        }
    }

    public YourEntity getRecord(String key) {
        return dataMap.get(key);
    }
}




