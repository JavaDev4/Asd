import com.fasterxml.jackson.databind.ObjectMapper;
import com.opencsv.CSVWriter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import java.io.*;
import java.util.*;

@RestController
public class GopController {

    @Autowired
    private GopService gopService;

    @Qualifier("adfsRestTemplate")
    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private ObjectMapper objectMapper;

    private static final Logger Log = LoggerFactory.getLogger(GopController.class);

    public String getEciNumber(Integer id) throws IOException {
        String url = "https://api-apps-qw02-uat02-na.jpmchase.net/jpmc/customer/identity-resolution/ext";
        HttpHeaders headers = new HttpHeaders();
        headers.set("channel-type", "test");
        headers.set("trace-id", "123");
        headers.set("uncommittedReadAllowIndicator", "true");
        headers.set("client-id", "N766425");

        HttpEntity<String> entity = new HttpEntity<>(headers);
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
        return extractEcild(response.getBody());
    }

    public String extractEcild(String responseBody) {
        String extractedEcild = null;
        try {
            GopResponse[] responseDataArray = objectMapper.readValue(responseBody, GopResponse[].class);
            if (responseDataArray.length > 0) {
                String enterprisePartyIdentifier = responseDataArray[0].getEnterprisePartyIdentifier();
                if (enterprisePartyIdentifier != null && !enterprisePartyIdentifier.isEmpty()) {
                    extractedEcild = enterprisePartyIdentifier;
                }
            }
        } catch (Exception exception) {
            Log.error("Failed to extract ECI ID: {}", exception.getLocalizedMessage());
        }
        return extractedEcild;
    }

    @GetMapping("/eci-numbers")
    public void getEciNumbers() throws IOException {
        String filepath = "path\\to\\your\\csv\\file.csv"; // Update the file path
        List<Integer> ids = getIdsFromCsv(filepath);
        List<String[]> dataLines = new ArrayList<>();
        dataLines.add(new String[]{"GCID", "ECI"});

        for (Integer currentId : ids) {
            try {
                String eci = getEciNumber(currentId);
                if (eci != null) {
                    dataLines.add(new String[]{String.valueOf(currentId), eci});
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        writeCsv(dataLines);
    }

    private List<Integer> getIdsFromCsv(String filepath) throws FileNotFoundException {
        // ... existing implementation ...
    }

    private void writeCsv(List<String[]> dataLines) {
        // ... existing implementation ...
    }

    // GopResponse class
    public static class GopResponse {
        private Long alternatePartyExternalIdentifier;
        private String enterprisePartyIdentifier;
        private String externalCurrentValueText;
        private String externalSourceRecordName;
        private String recordIdentifier;
        private String externalMapStatusRecordName;
        private String externalSourceRecordIdentifier;
        private String externalMapStatusRecordIdentifier;

        // getters and setters for each field
    }
}
