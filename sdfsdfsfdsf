import java.util.concurrent.*;

public class RateLimiter {
    private final Semaphore permits;
    private final ScheduledExecutorService scheduler;

    public RateLimiter(int maxCallsPerMinute) {
        this.permits = new Semaphore(maxCallsPerMinute);

        // Calculate the period for permit release
        long period = TimeUnit.MINUTES.toMillis(1) / maxCallsPerMinute;

        // Initialize the scheduled executor service
        this.scheduler = Executors.newScheduledThreadPool(1);
        
        // Schedule a task to release a permit at a fixed rate
        scheduler.scheduleAtFixedRate(() -> {
            if (permits.availablePermits() < maxCallsPerMinute) {
                permits.release();
            }
        }, 0, period, TimeUnit.MILLISECONDS);
    }

    public void acquire() {
        try {
            permits.acquire();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new RuntimeException("Interrupted while waiting for a permit", e);
        }
    }

    public void shutdown() {
        scheduler.shutdown();
    }
}
