import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.stereotype.Component;
import java.util.concurrent.*;

@Slf4j
@Component
public class RateLimiter implements InitializingBean, DisposableBean {
    private final Semaphore permits;
    private final ScheduledExecutorService scheduler;
    private final int maxCallsPerMinute;

    public RateLimiter() {
        this.maxCallsPerMinute = 1200; // Default: Allow 1200 calls per minute
        this.permits = new Semaphore(maxCallsPerMinute);
        this.scheduler = Executors.newScheduledThreadPool(1);
    }

    @Override
    public void afterPropertiesSet() {
        long period = TimeUnit.MINUTES.toMillis(1) / maxCallsPerMinute;
        scheduler.scheduleAtFixedRate(this::releasePermit, 0, period, TimeUnit.MILLISECONDS);
    }

    private void releasePermit() {
        int permitsAvailable = permits.availablePermits();
        int permitsToRelease = Math.min(maxCallsPerMinute - permitsAvailable, permitsAvailable);
        permits.release(permitsToRelease);
        log.info("Released {} permits. Available permits: {}", permitsToRelease, permits.availablePermits());
    }

    public void acquirePermit() throws InterruptedException {
        permits.acquire();
        log.info("Acquired permit. Available permits: {}", permits.availablePermits());
    }

    @Override
    public void destroy() {
        scheduler.shutdown();
        try {
            if (!scheduler.awaitTermination(60, TimeUnit.SECONDS)) {
                scheduler.shutdownNow();
            }
        } catch (InterruptedException e) {
            scheduler.shutdownNow();
            Thread.currentThread().interrupt();
        }
        log.info("Rate limiter shut down");
    }
}
