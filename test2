import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;

public class RecordCounter {

    private final ConcurrentLinkedQueue<Record> recordQueue = new ConcurrentLinkedQueue<>();
    private final ConcurrentHashMap<String, Set<String>> itemCountMap = new ConcurrentHashMap<>();

    /**
     * Adds a new record to the queue and processes all records.
     *
     * @param address The address of the record.
     * @param itemNo  The item number of the record.
     */
    public void addAndProcessRecord(String address, String itemNo) {
        recordQueue.add(new Record(address, itemNo));
        processRecords();
    }

    /**
     * Processes all records in the queue and updates their item count.
     */
    private void processRecords() {
        while (!recordQueue.isEmpty()) {
            Record record = recordQueue.poll();
            if (record != null) {
                itemCountMap.computeIfAbsent(record.getAddress(), k -> new CopyOnWriteArraySet<>()).add(record.getItemNo());
            }
        }

        // Assign the count to each record in the map
        itemCountMap.forEach((address, items) -> {
            int count = items.size();
            recordQueue.stream().filter(r -> r.getAddress().equals(address))
                .forEach(r -> {
                    synchronized (r) {
                        r.setItemCount(count);
                    }
                });
        });
    }

    // Record class and other parts of the class
}
