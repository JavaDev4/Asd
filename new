import io.github.resilience4j.ratelimiter.RateLimiterConfig;
import io.github.resilience4j.ratelimiter.RateLimiterRegistry;
import io.github.resilience4j.retry.RetryConfig;
import io.github.resilience4j.retry.RetryRegistry;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.time.Duration;

@Configuration
public class ResilienceConfig {

    @Bean
    public RetryConfig retryConfig() {
        return RetryConfig.custom()
                .maxAttempts(100)
                .waitDuration(Duration.ofSeconds(1))
                .build();
    }

    @Bean
    public RateLimiterConfig rateLimiterConfig() {
        return RateLimiterConfig.custom()
                .limitRefreshPeriod(Duration.ofSeconds(60))
                .limitForPeriod(1100)
                .timeoutDuration(Duration.ofSeconds(1))
                .build();
    }

    @Bean
    public RetryRegistry retryRegistry(RetryConfig retryConfig) {
        return RetryRegistry.of(retryConfig);
    }

    @Bean
    public RateLimiterRegistry rateLimiterRegistry(RateLimiterConfig rateLimiterConfig) {
        return RateLimiterRegistry.of(rateLimiterConfig);
    }
}


--------

import io.github.resilience4j.ratelimiter.RateLimiter;
import io.github.resilience4j.retry.Retry;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.HttpClientErrorException;

// ... other imports

@Service
public class YourService {

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private RetryRegistry retryRegistry;

    @Autowired
    private RateLimiterRegistry rateLimiterRegistry;

    public List<String> getEciNumber(Integer id) throws JSONException, InterruptedException {
        String ecild = null;
        int status = 0;
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<String> entity = new HttpEntity<>(headers);
        String gcpUrlNew = url + id;

        Retry retry = retryRegistry.retry("retryAndRateLimit");
        RateLimiter rateLimiter = rateLimiterRegistry.rateLimiter("retryAndRateLimit");

        try {
            ResponseEntity<String> gpResponse = restTemplate.execute(gcpUrlNew, HttpMethod.GET, request -> {}, 
                responseExtractor -> RateLimiter.decorateCheckedSupplier(rateLimiter, 
                    () -> Retry.decorateCheckedSupplier(retry, 
                        () -> {
                            ResponseEntity<String> response = responseExtractor.extractData(response);
                            status = response.getStatusCodeValue();
                            if (response.getStatusCode() == HttpStatus.OK) {
                                ecild = extractEciId(response.getBody()); // Here we use your extractEciId method
                            }
                            return response;
                        })).get());
        } catch (HttpClientErrorException exception) {
            status = exception.getStatusCode().value();
        } finally {
            writeToCs(id, ecild, status); // Ensure this method is implemented to handle the final step
        }

        // ... return or handle response
    }

    // Assume this method is implemented elsewhere in your class
    private String extractEciId(String responseBody) {
        // Extract ECI ID logic here
        return extractedEciId;
    }

    // ... other methods
}