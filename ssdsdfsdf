 synchronized (this) {
            if (transactionCount >= MAX_TRANSACTIONS) {
                try {
                    log.info("Reached limit, pausing for a minute...");
                    TimeUnit.SECONDS.sleep(PAUSE_DURATION);
                    transactionCount = 0; // reset the count after the pause
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    log.error("Thread interrupted during pause", e);
                    return;
                }
            }
            rateLimiter.acquire(); // regulate the TPS
            transactionCount++;
        }
------
 private final RateLimiter rateLimiter = RateLimiter.create(1100.0);
    private int transactionCount = 0;
    private Instant windowStart = Instant.now();
    private static final int MAX_TRANSACTIONS = 1100;
    private static final long WINDOW_LENGTH = 60; // seconds

 synchronized (this) {
            if (transactionCount >= MAX_TRANSACTIONS) {
                long elapsedTime = Duration.between(windowStart, Instant.now()).getSeconds();
                long timeToWait = WINDOW_LENGTH - elapsedTime;
                if (timeToWait > 0) {
                    try {
                        log.info("Rate limit reached, waiting for " + timeToWait + " seconds...");
                        TimeUnit.SECONDS.sleep(timeToWait);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                        log.error("Thread interrupted during wait", e);
                        return;
                    }
                }
                transactionCount = 0; // reset the count for the new window
                windowStart = Instant.now(); // reset the window start time
            }
            
            if (transactionCount == 0) {
                windowStart = Instant.now(); // set the start of a new window
            }
            rateLimiter.acquire(); // regulate the TPS
            transactionCount++;
        }

-----
    private final RateLimiter rateLimiter = RateLimiter.create(1100.0);
    private final AtomicInteger transactionCount = new AtomicInteger(0);
    private volatile Instant windowStart = Instant.now();
    private static final int MAX_TRANSACTIONS = 1100;
    private static final long WINDOW_LENGTH = 60; // seconds

rateLimiter.acquire(); // Regulate the TPS

        if (transactionCount.incrementAndGet() > MAX_TRANSACTIONS) {
            synchronized (this) {
                if (transactionCount.get() > MAX_TRANSACTIONS) {
                    long elapsedTime = Duration.between(windowStart, Instant.now()).getSeconds();
                    long timeToWait = WINDOW_LENGTH - elapsedTime;
                    if (timeToWait > 0) {
                        try {
                            log.info("Rate limit reached, waiting for " + timeToWait + " seconds...");
                            TimeUnit.SECONDS.sleep(timeToWait);
                        } catch (InterruptedException e) {
                            Thread.currentThread().interrupt();
                            log.error("Thread interrupted during wait", e);
                            return;
                        }
                    }
                    transactionCount.set(0); // reset the count for the new window
                    windowStart = Instant.now(); // reset the window start time
                }
            }
---------



    private static final int MAX_CALLS_PER_MINUTE = 1100;
    private final AtomicInteger callCounter = new AtomicInteger(0);
    private volatile Instant windowStart = Instant.now();

    @Autowired
    private RestTemplate restTemplate;

    public synchronized void yourApiCallMethod(String gcpUrlNew, HttpEntity<String> entity) {
        if (Instant.now().isAfter(windowStart.plusSeconds(60))) {
            // Reset for a new window
            windowStart = Instant.now();
            callCounter.set(0);
        }

        if (callCounter.get() >= MAX_CALLS_PER_MINUTE) {
            long waitTime = 60 - (Instant.now().getEpochSecond() - windowStart.getEpochSecond());
            try {
                Thread.sleep(waitTime * 1000);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                log.error("Interrupted while waiting", e);
                return;
            }

            // Reset for a new window
            windowStart = Instant.now();
            callCounter.set(0);
        }

        callCounter.incrementAndGet();
------------


 public synchronized List<String> getEciNumber(Integer id) throws JSONException, InterruptedException {
        if (Instant.now().isAfter(windowStart.plusSeconds(60))) {
            windowStart = Instant.now();
            callCounter.set(0);
        }

        if (callCounter.get() >= MAX_CALLS_PER_MINUTE) {
            long waitTime = 60 - (Instant.now().getEpochSecond() - windowStart.getEpochSecond());
            log.info("Rate limit reached, waiting for {} seconds...", waitTime);
            Thread.sleep(waitTime * 1000);
            windowStart = Instant.now();
            callCounter.set(0);
        }

        callCounter.incrementAndGet();

        String ecild = null;
--------


 public synchronized List<String> getEciNumber(Integer id) throws JSONException, InterruptedException {
        // Check and wait if rate limit is reached
        if (Instant.now().isAfter(windowStart.plusSeconds(WINDOW_LENGTH))) {
            windowStart = Instant.now(); // Reset the window
            transactionCount.set(0); // Reset the count
        }

        if (transactionCount.incrementAndGet() > MAX_TRANSACTIONS) {
            long elapsedTime = Duration.between(windowStart, Instant.now()).getSeconds();
            long timeToWait = WINDOW_LENGTH - elapsedTime;
            if (timeToWait > 0) {
                Thread.sleep(timeToWait * 1000);
                windowStart = Instant.now(); // Start of a new window after waiting
                transactionCount.set(1); // Reset count to 1 as we're making a call immediately after waiting
            }
        }

        String ecild = null;

//Make api call here.
